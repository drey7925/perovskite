// Copyright 2023 drey7925
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0

syntax = "proto3";

package perovskite.protocol.render;

message TextureReference {
    string texture_name = 1;
    // Only supported for rendering blocks, not supported in inventory or popups yet
    TextureCrop crop = 2;
}

// If set, the texture will be cropped to the given coordinates.
// Use ranges 0-1 for the full texture
message TextureCrop {
    float left = 1;
    float top = 2;
    float right = 3;
    float bottom = 4;
    // If set, the rectangle defined by the four fields above will
    // be cropped *further* by this dynamic rule
    DynamicCrop dynamic = 5;
}
// The rule defining how to crop a texture based on its variant
message DynamicCrop {
    // AND the variant with this value to get the horizontal grid cell (the 1 bits must be contiguous)...
    uint32 x_selector_bits = 1;
    // out of this many grid cells total. Values range from [0..x_cells-1]
    // with 0 leftmost in the texture
    uint32 x_cells = 2;
    // Do the same thing with these fields to get the vertical grid cell
    // (0 is topmost, TODO check)
    uint32 y_selector_bits = 3;
    uint32 y_cells = 4;
    // If variant AND this is nonzero, flip the selected grid cell horizontally
    uint32 flip_x_bit = 5;
    // If variant AND this is nonzero, flip the selected grid cell vertically
    uint32 flip_y_bit = 6;
}