// Copyright 2023 drey7925
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0

syntax = "proto3";

package perovskite.protocol.audio;

import "coordinates.proto";

message SampledSound {
  // The ID used for all messages setting up the sound
  uint32 sound_id = 1;
  // The filename to use with GetMediaRequest to get this sound. At this time, only full WAV files (with header) are
  // supported.
  string media_filename = 2;
}

// Used for attributing sound to the right volume control
enum SoundSource {
  SOUNDSOURCE_UNSPECIFIED = 0;
  // Background effects (e.g. natural sounds, running water, etc)
  SOUNDSOURCE_BACKGROUND = 1;
  // Sound came from oneself (if we see this in a network packet, the sound was routed via the server
  // e.g. because a player did something that produced a sound through game content)
  SOUNDSOURCE_SELF = 2;
  // Sound came from a player other than self; this is always routed via the server
  SOUNDSOURCE_PLAYER = 3;
  // Sound came from a world interaction (e.g. entity, block)
  SOUNDSOURCE_WORLD = 4;
}

message SampledSoundPlayback {
  // Initial implementation, probably byte-inefficient compared to a more packed format. Oh well.

  // Tick to start the sound. If precisely 0, play the sound as soon as it's received.
  uint64 tick = 1;
  uint32 sound_id = 2;
  // The position of the sound
  perovskite.protocol.coordinates.Vec3D position = 3;
  // If set, no doppler effect or time delay
  bool disable_doppler = 4;
  // If set, no square-law energy falloff
  bool disable_falloff = 5;
  // If set, no left/right balance based on direction of sound
  bool disable_balance = 6;
  // The in-world source this sound was attributed to
  SoundSource source = 7;
  // Volume 0.0 to 1.0
  float volume = 8;
  // TODO support looping and cancellation
}
